VM1 1.0.0 Assembler documentation

  Keywords in VM1 assembler are case insensitive

Operation codes

  For opcodes hex values, see vm1_doc.txt

  0x0 | END                   > none

    Ends program execution.
    End won't take in any parameters

  0x1 | JMP | JUMP            > 16bit value

    Jumps to other memory location.
    Takes in value that is used as a
    memory location.

  0x2 | PBR | POSITIVE_BRANCH > flag, 16bit value

    Takes in flag that is checked.
    if flag is 1, program counter jumps
    to given address

  0x3 | NBR | NEGATIVE_BRANCH > flag, 16bit value

    Takes in flag that is checked.
    if flag is 0, program counter jumps
    to given address

  - Operations that updates flags -----------------------------------------------

  0x4  | ADD                         > register, register
  0x5  | SUB | SUBTRACT              > register, register
  0x6  | MUL | MULTIPLY              > register, register
  0x7  | DIV | DIVIDE                > register, register
  0x8  | REM | REMINDER              > register, register

  0x9  | SRV | SET_REGISTER_VALUE    > register, 16bit value
  0xA  | SRR | SET_REGISTER_REGISTER > register, register
  0xB  | SRM | SET_REGISTER_MEMORY   > register, register
  0xC  | SMR | SET_MEMORY_REGISTER   > register, register

  0xD  | IEQ | IS_EQUAL              > register, register
  0xE  | ILT | IS_LESS_THAN          > register, register
  0xF  | IMT | IS_MORE_THAN          > register, register
  0x10 | ILQ | IS_LESS_OR_EQUAL_TO   > register, register
  0x11 | IMQ | IS_MORE_OR_EQUAL_TO   > register, register

  -------------------------------------------------------------------------------

  0x12 | OUT | OUTPUT                > register, 8bit value

    The second register value is used for setting the print format type.

    0x0 | BIN | BINARY
    0x1 | HEX | HEXADECIMAL
    0x2 | INT | INTEGER
    0x3 | CHR | CHARACTER

REGISTERS

  There are 4 registers avaliable. all of them are 16 bits in size,
  and general purpose.

  0x0 | RG1 | REGISTER1
  0x1 | RG2 | REGISTER2
  0x2 | RG3 | REGISTER3
  0x3 | RG4 | REGISTER4

FLAGS

  There are 8 flags in avaliable.

  0x0 | ZRO | ZERO
  0x1 | POS | POSITIVE
  0x2 | NEG | NEGATIVE

  0x3 | EQL | EQUAL

  0x4 | LTH | LESS_THAN
  0x5 | MTH | MORE_THAN

  0x6 | LQT | LESS_OR_EQUAL_TO
  0x7 | MQT | MORE_OR_EQUAL_TO

Data formats

  You can write data in binary, hex, integers, characters,
  and strings. Remember, when using strings you can't assign
  it straight to any register with SRV op code. Youll have to
  use location pointers for that.

  Hex

    To use hex values use SX or SINGLE_HEX for values that are
    size of single byte, and DX or DOUBLE_HEX for values that are
    size of 16bits.

    Examples: sx:0f dx:00ff single_hex:ff double_hex:ffff

  Integer

    To use integer values use SI or SINGLE_INT for values that are
    size of single byte, and DI or DOUBLE_INT for values that are
    size of 16bits.

    Examples: si:10 di:5045 single_int:255 double_int:12345

  Strings and characters

    For ASCII strings and characters use '"' around the strings or
    characters. There are no escape characters. You have to use
    single byte sized integer or hex value for quotes, newlines, tabs
    etc.

  Escape characters

    There are no escape characters for string. to write '"' use
    its ascii value with "si:" or "sx:".

Location pointer and location pointer call ('>' and ':')

  To use location pointers, name for them needs to be specified.
  For example, if you want to access :name1 location in memory,
  you need to declare corresponding >name1 in somewhere in the
  assembly file.

  Location pointer '>'

    Location pointer creates access point in memory which value
    you can call by using Location pointer call.

  Location pointer call ':'

    Location reference is used for accessing location that 
    corresponding location pointer is pointing to.
